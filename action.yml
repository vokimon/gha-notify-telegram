# TODO: Notify first green after red in a branch
# maybe using something like: https://github.com/MercymeIlya/last-workflow-status

# TODO: Remove duplicated repo and branch info

name: 'CI notifications on Telegram'
description: 'Notifies by Telegram about failed CI runs or successfull runs after previous failures in the branch'
inputs:
  token:
    description: "Telegram Bot Token"
  to:
    description: "Telegram Channel ID"
  report_green_to_green:
    description: "If false green to green transitions on a branch will not be reported."
    default: true
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}
runs:
  using: "composite"
  steps:
    - name: Debug
      shell: bash
      if: false
      run: |
        echo "webhookUrl: ${{ inputs.webhook }}"
        echo "jobStatus: ${{ job.status }}"
        echo "imageUrl: ${{ format('https://github.com/{0}.png', github.event.head_commit.author.username) }}"
        echo "imageAltText: ${{ github.event.head_commit.author.name }}"
        echo "subtitle: ${{ github.event.head_commit.message }}"
        echo "title: ${{ format('{0} -- [{1}]', github.event.repository.name, github.event.ref) }}"

    - name: Obtain status of previous run on the branch
      if: always()
      shell: bash
      run: |
        curl -s https://api.github.com/repos/${{github.repository}}/actions/runs?branch=${{ github.ref_name }} |
        jq -r '[.workflow_runs | sort_by(.created_at) | .[] | select(.name == "${{ github.workflow }}") | { id: .id,  branch: .head_branch, conclusion: .conclusion, message: .head_commit.message, created_at: .created_at }  ] | .[-10:]'
        LAST_RUN=$(
          curl -s https://api.github.com/repos/${{github.repository}}/actions/runs?branch=${{ github.ref_name }}  |
          jq -r '[.workflow_runs | sort_by(.created_at) | .[] | select(.name == "${{ github.workflow }}") | select(.id != ${{github.run_id}}) | { branch: .head_branch, conclusion: .conclusion }  ] | .[-1].conclusion // "new_branch"'
        )
        echo "LAST_RUN=$LAST_RUN"
        echo "LAST_RUN=$LAST_RUN" >> $GITHUB_ENV
        echo "CURRENT_RUN=${{job.status}}"
        echo "RUN_ID=${{github.run_id}}"
        echo "REPORT_GREEN_TO_GREEN=${{inputs.ignore_green_to_green == false}}"
        function status_icon() {
          ([ "$1" == "failure" ] && echo '❌')  ||
          ([ "$1" == "success" ] && echo '✅')  ||
          ([ "$1" == "new_branch" ] && echo '✨' ) ||
          echo "$1"
        }
        LAST_RUN_ICON="$( status_icon $LAST_RUN)"
        THIS_RUN_ICON="$( status_icon ${{ job.status }} )"
        echo LAST_RUN_ICON="$LAST_RUN_ICON" >> $GITHUB_ENV
        echo THIS_RUN_ICON="$THIS_RUN_ICON" >> $GITHUB_ENV
        echo "$LAST_RUN_ICON -> $THIS_RUN_ICON"

    - name: 📢 Notify changes in Telegram
      uses: cbrgm/telegram-github-action@v1
      if: job.status != 'success' || env.LAST_RUN != 'success' || inputs.ignore_green_to_green == false

      # this allows the build to succeed even when the notification fails
      # e.g. due to dependabot push, which may not have the secret
      continue-on-error: true
      with:
        token: ${{ inputs.token }}
        to: ${{ inputs.to }}
        parse-mode: 'markdown'
        disable-web-page-preview: true
        message: |
          ${{ format('{3} → {2}: {0} `[{1}]`', github.event.repository.name, github.ref_name, env.THIS_RUN_ICON, env.LAST_RUN_ICON) }}

          ${{ format('Author: {0} ![Avatar](https://github.com/{1}.png)', github.event.head_commit.author.name, github.event.head_commit.author.username ) }}
          
          Commit: ${{ github.event.head_commit.message }}

          [Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) - [Repository](https://github.com/${{ github.repository }}) - [Changes](https://github.com/${{ github.repository }}/commit/${{ github.sha }})

#    - name: Google Chat Notificationa
#      uses: SimonScholz/google-chat-action@main
#      if: job.status == 'failure'
#      # this allows the build to succeed even when the notification fails
#      # e.g. due to dependabot push, which may not have the secret
#      continue-on-error: true
#      with:
#        # https://docs.github.com/en/webhooks/webhook-events-and-payloads
#        webhookUrl: ${{ inputs.webhook }}
#        jobStatus: ${{ job.status }}
#        imageUrl: ${{ format('https://github.com/{0}.png', github.event.head_commit.author.username) }}
#        imageAltText: ${{ github.event.head_commit.author.name }}
#        subtitle: ${{ github.event.head_commit.message }}
#        title: "${{ format('{0} -- [{1}]', github.event.repository.name, github.ref_name ) }}"


